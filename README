hashmap
-------
A simple hashmap in C. No license because I don't care enough - do whatever you
want with it. Uses FNV-1a hash and handles collisions through linked lists.
Values are simply stored as (void *), which means you can store a pointer
to whatever you want. Just remember what kind of data you're working with
and typecast accordingly when retrieving values.

READ THE HEADER FILE and change the options for your use case.

If any issues arise, simply open an issue.

Creating a Hashmap
------------------
Call new_hashmap().

Creating and Adding an Item (Bucket)
------------------------------------
You can create an item with new_bucket("key", val, val_free_func).
If your key is stored in memory, make sure to free it, as new_bucket()
duplicates it. If your values are strings, val_free_func can just be free().
Otherwise, create a function that frees your struct and use it as follows:

        new_bucket(
                "key",
                example_struct,
                hashmap_item_free_func(struct_free_func)
        );

hashmap_item_free_func is a macro that will conveniently typecast your function.

If you just want to store your value and not have it be freed with the hashmap,
make val_free_func NULL.

Once you have your item, simply call hashmap_insert(map, bucket).

Retrieving an Item
------------------
Call hashmap_get(map, key).

Removing an Item
----------------
Call hashmap_remove(map, key);

Freeing
-------
Simply call free_hashmap(map) and everything should be freed recursively.
